<?php

/*
 * The MIT License
 *
 * Copyright 2015 - 2016 René Vögeli <rvoegeli@vhtec.de>.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
require_once dirname(__FILE__) . '/../../../src/Xrandr/Geometry.php';
require_once dirname(__FILE__) . '/../../../src/Xrandr/Mode.php';

use \Xrandr\Mode;
use \Xrandr\Geometry;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-20 at 23:32:04.
 */
class ModeTest extends PHPUnit_Framework_TestCase {

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {

	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {

	}

	/**
	 * @covers \Xrandr\Mode::getProbableResolution
	 * @covers \Xrandr\Mode::__construct
	 * @afterClass \Xrandr\Geometry
	 */
	public function testGetProbableResolution() {
		$object = new Mode("1366x768", "", false, false);
		$expectedObject = Geometry::parseString("1366x768");
		$this->assertEquals($expectedObject, $object->getProbableResolution());

		$object = new Mode("800x600_60.00", "", false, false);
		$expectedObject = Geometry::parseString("800x600");
		$this->assertEquals($expectedObject, $object->getProbableResolution());
	}

	/**
	 * @covers \Xrandr\Mode::parseLine
	 * @covers \Xrandr\Mode::getName
	 * @covers \Xrandr\Mode::getFrequency
	 * @covers \Xrandr\Mode::isCurrent
	 * @covers \Xrandr\Mode::isPreferred
	 * @covers \Xrandr\Mode::__construct
	 */
	public function testParseLine() {
		$object = Mode::parseLine("   1366x768       60.0 +");
		$this->assertEquals("1366x768", $object->getName());
		$this->assertEquals("60.0", $object->getFrequency());
		$this->assertFalse($object->isCurrent());
		$this->assertTrue($object->isPreferred());

		$object = Mode::parseLine("   1360x768       59.8*    60.0");
		$this->assertEquals("1360x768", $object->getName());
		$this->assertEquals("59.8", $object->getFrequency());
		$this->assertTrue($object->isCurrent());
		$this->assertFalse($object->isPreferred());

		$object = Mode::parseLine("   1024x768       60.0 ");
		$this->assertEquals("1024x768", $object->getName());
		$this->assertEquals("60.0", $object->getFrequency());
		$this->assertFalse($object->isCurrent());
		$this->assertFalse($object->isPreferred());

		$object = Mode::parseLine("   1024x768       60.0");
		$this->assertEquals("1024x768", $object->getName());
		$this->assertEquals("60.0", $object->getFrequency());
		$this->assertFalse($object->isCurrent());
		$this->assertFalse($object->isPreferred());

		$object = Mode::parseLine("   1024y768  --  60,0");
		$this->assertNull($object);
	}

}
