<?php

/*
 * The MIT License
 *
 * Copyright 2015 - 2016 René Vögeli <rvoegeli@vhtec.de>.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
require_once dirname(__FILE__) . '/../../../vendor/autoload.php';

use Xrandr\Geometry;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-20 at 20:29:15.
 */
class GeometryTest extends PHPUnit_Framework_TestCase
{

  /**
   * @covers \Xrandr\Geometry::getResolutionString
   * @covers \Xrandr\Geometry::__construct
   */
  public function testGetResolutionString()
  {
    $randomWidth = rand(0, 3500);
    $randomHeight = rand(0, 3500);

    $expectedString = "{$randomWidth}x{$randomHeight}";

    $object = new Geometry($randomWidth, $randomHeight, 0, 0);

    $this->assertEquals($expectedString, $object->getResolutionString());
  }

  /**
   * @covers \Xrandr\Geometry::getPositionString
   * @covers \Xrandr\Geometry::__construct
   */
  public function testGetPositionString()
  {
    $randomX = rand(-3500, 3500);
    $randomY = rand(-3500, 3500);
    $signedX = sprintf("%+d", $randomX);
    $signedY = sprintf("%+d", $randomY);
    $expectedString = "{$signedX}{$signedY}";

    $object = new Geometry(0, 0, $randomX, $randomY);

    $this->assertEquals($expectedString, $object->getPositionString());
  }

  /**
   * @covers \Xrandr\Geometry::getGeometryString
   * @covers \Xrandr\Geometry::getPositionString
   * @covers \Xrandr\Geometry::getResolutionString
   * @covers \Xrandr\Geometry::__construct
   * @after \Xrandr\Geometry::getResolutionString
   * @after \Xrandr\Geometry::getPositionString
   *
   */
  public function testGetGeometryString()
  {
    $randomWidth = rand(0, 3500);
    $randomHeight = rand(0, 3500);
    $randomX = rand(-3500, 3500);
    $randomY = rand(-3500, 3500);
    $signedX = sprintf("%+d", $randomX);
    $signedY = sprintf("%+d", $randomY);
    $expectedString = "{$randomWidth}x{$randomHeight}{$signedX}{$signedY}";

    $object = new Geometry($randomWidth, $randomHeight, $randomX, $randomY);

    $this->assertEquals($expectedString, $object->getGeometryString());
  }

  /**
   * @covers \Xrandr\Geometry::parseString
   * @covers \Xrandr\Geometry::__construct
   */
  public function testParseString()
  {
    $object = Geometry::parseString("1360x768+200+50");
    $this->assertAttributeEquals(1360, "width", $object);
    $this->assertAttributeEquals(768, "height", $object);
    $this->assertAttributeEquals(200, "x", $object);
    $this->assertAttributeEquals(50, "y", $object);

    $object = Geometry::parseString("1360x768-200-50");
    $this->assertAttributeEquals(1360, "width", $object);
    $this->assertAttributeEquals(768, "height", $object);
    $this->assertAttributeEquals(-200, "x", $object);
    $this->assertAttributeEquals(-50, "y", $object);

    $object = Geometry::parseString("1360x768");
    $this->assertAttributeEquals(1360, "width", $object);
    $this->assertAttributeEquals(768, "height", $object);
    $this->assertAttributeEquals(0, "x", $object);
    $this->assertAttributeEquals(0, "y", $object);

    $object = Geometry::parseString("+200-50");
    $this->assertAttributeEquals(0, "width", $object);
    $this->assertAttributeEquals(0, "height", $object);
    $this->assertAttributeEquals(200, "x", $object);
    $this->assertAttributeEquals(-50, "y", $object);

    $object = Geometry::parseString("200-50");
    $this->assertAttributeEquals(0, "width", $object);
    $this->assertAttributeEquals(0, "height", $object);
    $this->assertAttributeEquals(200, "x", $object);
    $this->assertAttributeEquals(-50, "y", $object);

    $object = Geometry::parseString("-200+50");
    $this->assertAttributeEquals(0, "width", $object);
    $this->assertAttributeEquals(0, "height", $object);
    $this->assertAttributeEquals(-200, "x", $object);
    $this->assertAttributeEquals(50, "y", $object);

    $object = Geometry::parseString("200y50");
    $this->assertNull($object);
  }

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {

  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {

  }

}
